


-- Hello world SQL query, SELECT alll records from actor table
SELECT * 
FROM actor;

-- Query for First_name and last_name in the actor table
SELECT first_name, last_name
FROM actor;

-- Qiery for a first_name that equals Nick using the WHERE clause
SELECT last_name, first_name
FROM actor
WHERE first_name = 'Nick';

-- Query for first_name that is LIKE Nick using LIKE and WHERE

SELECT last_name, first_name
FROM actor
WHERE first_name LIKE 'Nick';

-- Query for all first_names that start with j using LIKE, WHERE and the wild card

SELECT first_name, last_name
FROM actor
WHERE first_name LIKE 'J%';

-- Query for all first_name data that starts with K and has 2 letters after the k.

SELECT first_name, actor_id
FROM actor
WHERE first_name LIKE 'K__';

SELECT first_name, actor_id
FROM actor
WHERE first_name LIKE 'K__%th';

-- Comparing operators are :
-- Greater than (>) -- Less than (<))
-- Greater or erqual (>=) less or equal (<=)
-- Not equal (<>)

-- Explore Data with SELECT * Query ( DO this when you change to a new table)

SELECT *
FROM payment;

SELECT customer_id, amount
FROM payment
WHERE amount > 2.00;

--Query for data that shows customers who paind
-- an amount LESS than 7.99

SELECT customer_id, amount
FROM payment
WHERE amount < 7.99;

--Query for dat that shows customers who paind less than or equal to 7.99

SELECT customer_id, amount
FROM payment
WHERE amount <= 7.99
ORDER BY amount ASC;

-- Query for data that shows customer who paid an amount BETWEEN 2.00 and 7.99
--using WHERE and BETWEEN

SELECT customer_id, amount 
FROM payment
WHERE amount BETWEEN 2.00 AND 7.99;



--Query for data showign customers who paid
--amounts NOT EQUAL to 0.00
-- Order in DESCENDING ORDER
SELECT customer_id, amount 
FROM payment
WHERE amount <> 0.0
ORDER BY amount DESC;

-- SQL Aggregations => SUM(), AVG(), COUNT(), MIN(), MAX()

SELECT SUM(amount)
FROM payment
WHERE amount > 5.99;

-- Query to display average of amounts payed greater than 5.99
SELECT AVG(amount)
FROM payment
WHERE amount > 5.99;

-- Query to displayt count of amounts payed greater than 5.99
SELECT COUNT(amount)
FROM payment
WHERE amount > 5.99;




-- Query tot display all amounts above 7.99
SELECT amount
FROM payment
WHERE amount > 7.99;

-- Query displaying different amounts
-- counts the amounts

SELECT amount, COUNT(amount) 
FROM payment
GROUP BY amount
ORDER BY amount;

-- Query to display customer_id across from summed amount paid

SELECT customer_id, sum(amount) AS total_paid
FROM payment
GROUP BY customer_id
ORDER BY customer_id;

-- Select all from customer to see the table

SELECT *
FROM customer;
-- SQL HAVING clause 
-- Query to display customer_ids that show up more than 5 times
-- group by customer email

SELECT COUNT(customer_id), email
FROM customer
GROUP BY email
HAVING COUNT(customer_id) > 0;

-- Query to display customer emails where the fist_name is Lisa
SELECT first_name, email
FROM customer
WHERE first_name LIKE 'Lisa'
